from graphviz import Digraph

def visualize_huffman_tree(huffman_codes):
    dot = Digraph(comment='Huffman Tree')

    # Cria um nó raiz único
    dot.node('root', 'root')

    # Cria um conjunto para armazenar nós únicos
    created_nodes = {'root'}

    # Para cada código de Huffman, adicione os nós e arestas necessários
    for byte, code in huffman_codes.items():
        # Processa cada subcódigo
        previous_node = 'root'
        for i in range(len(code)):
            subcode = code[:i + 1]
            if subcode not in created_nodes:
                dot.node(subcode, subcode[-1])  # Mostra apenas o último bit para simplificar
                created_nodes.add(subcode)
                dot.edge(previous_node, subcode)

            previous_node = subcode

        # Adiciona o nó folha
        dot.node(f'leaf{byte}', f'{byte}', shape='box')
        dot.edge(previous_node, f'leaf{byte}')

    # Renderiza a árvore de Huffman
    dot.render('huffman_tree', view=True)


# Exemplo de uso
tree = {0: '000', 82: '0010000', 243: '0010001000', 195: '001000100100', 200: '0010001001010', 208: '0010001001011', 219: '001000100110', 222: '001000100111', 147: '001000101', 97: '00100011', 146: '001001000', 173: '0010010010', 188: '00100100110', 198: '001001001110', 218: '001001001111', 96: '00100101', 81: '0010011', 145: '001010000', 171: '0010100010', 170: '0010100011', 95: '00101001', 79: '0010101', 140: '001011000', 207: '0010110010000', 211: '0010110010001', 216: '001011001001', 239: '00101100101', 254: '0010110011', 143: '001011010', 144: '001011011', 80: '0010111', 1: '001100', 141: '001101000', 139: '001101001', 137: '001101010', 185: '00110101100', 221: '001101011010', 209: '0011010110110', 204: '0011010110111', 172: '0011010111', 94: '00110110', 134: '001101110', 142: '001101111', 78: '0011100', 6: '0011101', 249: '00111100', 93: '00111101', 77: '0011111', 130: '010000000', 184: '01000000100', 205: '0100000010100', 210: '0100000010101', 213: '0100000010110', 212: '0100000010111', 174: '0100000011', 247: '01000001', 12: '0100001', 135: '010001000', 136: '010001001', 138: '010001010', 133: '010001011', 13: '0100011', 10: '0100100', 7: '0100101', 76: '0100110', 8: '0100111', 9: '0101000', 92: '01010010', 191: '010100110000', 220: '010100110001', 193: '010100110010', 226: '010100110011', 168: '0101001101', 132: '010100111', 11: '0101010', 74: '0101011', 131: '010110000', 128: '010110001', 91: '01011001', 15: '0101101', 14: '0101110', 47: '0101111', 75: '0110000', 3: '0110001', 48: '0110010', 182: '01100110000', 187: '01100110001', 230: '011001100100', 223: '011001100101', 228: '011001100110', 214: '0110011001110', 217: '0110011001111', 166: '0110011010', 169: '0110011011', 164: '0110011100', 183: '01100111010', 192: '011001110110', 196: '011001110111', 124: '011001111', 4: '0110100', 73: '0110101', 45: '0110110', 90: '01101110', 127: '011011110', 253: '0110111110', 165: '0110111111', 49: '0111000', 72: '0111001', 44: '0111010', 51: '0111011', 167: '0111100000', 241: '01111000010', 189: '011110000110', 225: '011110000111', 129: '011110001', 121: '011110010', 126: '011110011', 71: '0111101', 53: '0111110', 46: '0111111', 52: '1000000', 42: '1000001', 54: '1000010', 5: '1000011', 16: '1000100', 50: '1000101', 19: '1000110', 55: '1000111', 41: '1001000', 117: '100100100', 125: '100100101', 120: '100100110', 118: '100100111', 68: '1001010', 18: '1001011', 43: '1001100', 64: '1001101', 20: '1001110', 69: '1001111', 56: '1010000', 70: '1010001', 89: '10100100', 240: '10100101000', 237: '10100101001', 163: '1010010101', 119: '101001011', 65: '1010011', 2: '1010100', 62: '1010101', 40: '1010110', 17: '1010111', 22: '1011000', 57: '1011001', 114: '101101000', 179: '10110100100', 202: '1011010010100', 201: '1011010010101', 227: '101101001011', 160: '1011010011', 109: '101101010', 122: '101101011', 58: '1011011', 59: '1011100', 60: '1011101', 21: '1011110', 38: '1011111', 39: '1100000', 161: '1100001000', 181: '11000010010', 229: '110000100110', 215: '1100001001110', 203: '1100001001111', 116: '110000101', 88: '11000011', 63: '1100010', 67: '1100011', 66: '1100100', 37: '1100101', 123: '110011000', 115: '110011001', 244: '1100110100', 162: '1100110101', 110: '110011011', 61: '1100111', 111: '110100000', 113: '110100001', 157: '1101000100', 252: '1101000101', 107: '110100011', 87: '11010010', 156: '1101001100', 159: '1101001101', 104: '110100111', 23: '1101010', 36: '1101011', 24: '1101100', 108: '110110100', 112: '110110101', 86: '11011011', 34: '1101110', 33: '1101111', 28: '1110000', 25: '1110001', 27: '1110010', 103: '111001100', 180: '11100110100', 224: '111001101010', 232: '111001101011', 155: '1110011011', 102: '111001110', 106: '111001111', 35: '1110100', 248: '11101010', 158: '1110101100', 233: '111010110100', 238: '111010110101', 199: '1110101101100', 206: '1110101101101', 190: '111010110111', 105: '111010111', 32: '1110110', 30: '1110111', 31: '1111000', 85: '11110010', 101: '111100110', 153: '1111001110', 176: '11110011110', 234: '111100111110', 231: '111100111111', 29: '1111010', 26: '1111011', 100: '111110000', 255: '1111100010', 154: '1111100011', 242: '11111001000', 197: '1111100100100', 194: '1111100100101', 186: '111110010011', 151: '1111100101', 152: '1111100110', 177: '11111001110', 175: '11111001111', 84: '11111010', 245: '111110110', 99: '111110111', 178: '11111100000', 236: '111111000010', 235: '111111000011', 148: '1111110001', 251: '111111001', 83: '11111101', 98: '111111100', 246: '111111101', 149: '1111111100', 150: '1111111101', 250: '111111111'}
  # Sua árvore de Huffman
visualize_huffman_tree(tree)
